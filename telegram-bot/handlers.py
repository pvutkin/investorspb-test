import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import save_user, get_user, save_startup
from models import User, Startup
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    save_user(user.id, user.username, 'unknown')
    
    welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã "–°—Ç–∞—Ä—Ç–∞–ø—ã –∏ –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã"

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø—ã –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/search - –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    """
    
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìö –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/search - –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
/chat - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    
    await update.message.reply_text(help_text)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    user = update.effective_user
    db_user = get_user(user.id)
    
    if db_user:
        profile_text = f"""
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
ID: {db_user['id']}
Telegram ID: {db_user['telegram_id']}
–ò–º—è: {db_user['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user['user_type'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {db_user['created_at'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
        """
    else:
        profile_text = "üë§ –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
    
    await update.message.reply_text(profile_text)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /search"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤", callback_data='search_startups')],
        [InlineKeyboardButton("üíº –ü–æ–∏—Å–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤", callback_data='search_investors')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=reply_markup)

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /register"""
    user = update.effective_user
    
    keyboard = [
        [InlineKeyboardButton("üè¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ —Å—Ç–∞—Ä—Ç–∞–ø", callback_data='register_startup')],
        [InlineKeyboardButton("üíº –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä", callback_data='register_investor')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=reply_markup)

async def chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /chat"""
    await update.message.reply_text("üí¨ –î–ª—è —á–∞—Ç–∞ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == 'search_startups':
        await query.edit_message_text("üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ —á–µ—Ä–µ–∑ API
        await query.edit_message_text("üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ (–ø—Ä–∏–º–µ—Ä):\n\n"
                                     "1. TechStart - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏\n"
                                     "2. GreenEnergy - –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –Ω–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö\n"
                                     "3. HealthCare Plus - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞")
        
    elif data == 'search_investors':
        await query.edit_message_text("üíº –ü–æ–∏—Å–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤...")
        await query.edit_message_text("üíº –ü–æ–∏—Å–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä):\n\n"
                                     "1. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤ - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä\n"
                                     "2. Venture Fund - –§–æ–Ω–¥ —Ä–∏—Å–∫–æ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n"
                                     "3. Tech Investors - –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä")
        
    elif data == 'register_startup':
        await query.edit_message_text("üè¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–∞:\n"
                                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Ç–∞–º.\n"
                                     "–°—Å—ã–ª–∫–∞: http://investorspb.ru/register")
        
    elif data == 'register_investor':
        await query.edit_message_text("üíº –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞:\n"
                                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Ç–∞–º.\n"
                                     "–°—Å—ã–ª–∫–∞: http://investorspb.ru/register")
        
    elif data == 'back_to_menu':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        await start_command(update, context)

async def echo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text.lower()
    
    if '–ø—Ä–∏–≤–µ—Ç' in user_message or '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π' in user_message:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!")
    elif '–ø–æ–º–æ—â—å' in user_message or 'help' in user_message:
        await help_command(update, context)
    else:
        await update.message.reply_text("ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã /start, /help, /profile, /search, /register\n"
                                       "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö!")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")